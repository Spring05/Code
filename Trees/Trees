package New;

import java.util.Stack;

class Node
{
	int value ;
	Node left,right;
	public Node(int value)
	{
		this.value = value;
		left=right=null;
	}
}

public class Trees 
{
	Node root;
	void inorder()
	{
		if(root==null)
		{
			return;
		}
		
		Stack<Node> s = new Stack<Node>(); 
		Node node = root;
		while(node!=null||s.size()!=0)
		{
			while(node!=null)
			{
			s.push(node);
			node=node.left;
			}
		
		node=s.pop();
		System.out.print(node.value + " "); 
		node = node.right;
		}
		
	}
	
	void postorder()
	{
		if(root==null)
		{
			return;
		}
		Stack<Node> s1 = new Stack<Node>();
		Stack<Node> s2 = new Stack<Node>();
		Node node = root;
		s1.push(root);
		while(s1.size()!=0)
		{
			root=s1.pop();
			s2.push(root);
			if(root.left!=null)
			{
				s1.push(root.left);
			}
			if(root.right!=null)
			{
				s1.push(root.right);
			}
			
		}
		
		while(s2.size()!=0)
		{
			root=s2.pop();
			System.out.print(root.value + " "); 
		}
	}
	 
	 

	
	public static void main(String[] args)
	{
		Trees t = new Trees();
		t.root = new Node(10); 
    t.root.left = new Node(8); 
    t.root.right = new Node(17); 
    t.root.left.left = new Node(7); 
    t.root.left.right = new Node(11); 
    t.root.left.left.left = new Node(3); 
    t.root.left.left.right = new Node(9);
    t.root.right.left = new Node(6); 
    t.root.right.right = new Node(21); 
    System.out.println("Inorder"); 
		t.inorder();
		System.out.println("Postorder"); 
		t.postorder();

	}	
}

//Inorder
//3 7 9 8 11 10 6 17 21 
//Postorder
//3 9 7 11 8 6 21 17 10 
